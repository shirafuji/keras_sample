# -*- coding: utf-8 -*-
"""Conv1d_sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zH-fOKqHdlS90xX8gQZL7sN0lQW8ohru
"""

# Conv1D
Conv1Dのサンプルコードです。

# ライブラリのimport
import tensorflow as tf
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Dense, Flatten
from keras.optimizers import RMSprop
import matplotlib.pyplot as plt

# データのロード
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# データの加工

## 画像データをそれぞれ1次元に
x_train = x_train.reshape(60000, 784, 1)
x_test = x_test.reshape(10000, 784, 1)

## 画像データの正規化し
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train = x_train/255
x_test = x_test/255

## 正解データを行列化
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# モデルの作成
model = Sequential()
## 畳み込み層
model.add(Conv1D(32, 3, padding='same', activation='relu', input_shape=(784, 1)))
## プーリング層
model.add(MaxPooling1D(2, padding='same'))
## Flatten層
model.add(Flatten())
## 全結合層
model.add(Dense(10, activation='softmax'))

# モデルをコンパイルする
model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])

# 学習
epochs = 20
batch_size = 128
history = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test))

# モデルの評価
score = model.evaluate(x_test, y_test, verbose=1)
print()
print('Test loss:', score[0])
print('Test accuracy:', score[1])

# 学習経過の可視化
loss     = history.history['loss']
val_loss = history.history['val_loss']

nb_epoch = len(loss)
plt.plot(range(nb_epoch), loss,     marker='.', label='loss')
plt.plot(range(nb_epoch), val_loss, marker='.', label='val_loss')
plt.legend(loc='best', fontsize=10)
plt.grid()
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()

